{"version":3,"sources":["Components/FormComponent.js","Components/ListComponent.js","App.js","index.js"],"names":["FormComponent","props","useState","form","setForm","errors","setErrors","textarea","useRef","setField","field","value","useEffect","window","addEventListener","e","keyCode","ctrlKey","document","getElementById","click","status","console","log","current","Form","noValidate","Group","className","Label","Control","required","type","name","onChange","target","isInvalid","placeholder","Feedback","as","rows","message","ref","Button","onClick","preventDefault","newErrors","test","match","findFormErrors","Object","keys","length","postData","id","ListComponent","items","map","item","Card","CardHeader","Body","App","isLoaded","setIsLoaded","setItems","setStatus","url","process","a","data","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","isJson","get","includes","json","ok","error","Promise","reject","oldArray","fetchData","Container","fluid","Row","Col","xs","lg","md","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2fa55c47.chunk.js","sourcesContent":["import {Button, Form, Alert} from \"react-bootstrap\";\nimport React, {useState, useEffect, useRef} from \"react\";\n\nfunction FormComponent(props) {\n\n    const [form, setForm] = useState({});\n    const [errors, setErrors] = useState({});\n    const textarea = useRef(null);\n\n    const setField = (field, value) => {\n        setForm({\n            ...form,\n            [field]: value\n        })\n\n        if (!!errors[field]) setErrors({\n            ...errors,\n            [field]: null\n        })\n    }\n\n    const findFormErrors = () => {\n        const {name, message} = form\n        const newErrors = {}\n        let nameValidator = /^[a-zA-Z0-9_]+$/gi;\n        let messageValidator = /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/g;\n        if (!name || name === '') newErrors.name = 'The field cannot be blank'\n        else if (!nameValidator.test(name)) newErrors.name = 'The field cannot contain only latin letters, numbers and underscore symbol'\n        if (!message || message === '') newErrors.message = 'The field cannot be blank'\n        else if (message.match(messageValidator)) newErrors.message = 'The field cannot not contain hypelinks'\n        return newErrors\n    }\n\n    useEffect(() => {\n        function onKeyup(e) {\n            if (e.keyCode === 13 && e.ctrlKey) {\n                document.getElementById('submitButton').click();\n            }\n        }\n\n        window.addEventListener('keyup', onKeyup);\n    }, []);\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        const newErrors = findFormErrors()\n        if (Object.keys(newErrors).length > 0) {\n            setErrors(newErrors)\n        } else {\n            props.postData({'name': form.name, 'message': form.message});\n        }\n    }\n\n    useEffect(() => {\n        if (props.status != null && props.status.status === 201) {\n            console.log('Message succesfully created', props.status.status);\n            textarea.current.value = '';\n        } else if (props.status != null) {\n            console.log(props.status);\n        }\n    }, [props.status]);\n\n    return (\n        <>\n            <Form noValidate>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control required\n                                  type=\"text\"\n                                  name=\"name\"\n                                  onChange={e => setField('name', e.target.value)}\n                                  isInvalid={!!errors.name}\n                                  placeholder=\"Enter your name\"/>\n                    <Form.Control.Feedback type='invalid'>\n                        {errors.name}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group className=\"mb-3\">\n                    <Form.Label>Message</Form.Label>\n                    <Form.Control required as=\"textarea\"\n                                  rows={3}\n                                  name=\"message\"\n                                  onChange={e => setField('message', e.target.value)}\n                                  isInvalid={!!errors.message}\n                                  ref={textarea}\n                                  placeholder=\"Please leave your message here\"/>\n                    <Form.Control.Feedback type='invalid'>\n                        {errors.message}\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Button onClick={handleSubmit} className=\"mb-2\" id=\"submitButton\">\n                    Send\n                </Button>\n            </Form>\n        </>\n    );\n}\n\nexport default FormComponent;","import React from \"react\";\nimport {Card} from \"react-bootstrap\";\nimport CardHeader from \"react-bootstrap/CardHeader\";\n\nfunction ListComponent(props) {\n    return (\n        <>\n            {props.items.map(item => (\n                <Card key={item.id} className=\"mb-2\">\n                    <CardHeader className=\"card-header\">\n                        {item.name}\n                    </CardHeader>\n                    <Card.Body>\n                        {item.message}\n                    </Card.Body>\n                </Card>\n            ))}\n        </>\n    );\n}\n\nexport default ListComponent;","import React, {useEffect, useState} from \"react\";\nimport {Row, Col, Container} from \"react-bootstrap\";\nimport FormComponent from \"./Components/FormComponent\";\nimport ListComponent from \"./Components/ListComponent\";\n\nfunction App() {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([],);\n    const [status, setStatus] = useState(null);\n    const url = process.env.REACT_APP_BACKEND_URL;\n\n    const postData = async (data = {}) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(data)\n        };\n\n        fetch(url, requestOptions)\n            .then(async response => {\n                const isJson = response.headers.get('content-type')?.includes('application/json');\n                const data = isJson && await response.json();\n                if (!response.ok) {\n                    const error = (data && data.message) || response.status;\n                    return Promise.reject(error);\n                }\n                if (response.status === 201) {\n                    setItems(oldArray => [data, ...oldArray]);\n                    setStatus(response);\n                }\n            })\n    }\n\n    useEffect(() => {\n        const fetchData = async (data = {}) => {\n            fetch(url)\n                .then(async response => {\n                    const isJson = response.headers.get('content-type')?.includes('application/json');\n                    const data = isJson && await response.json();\n                    if (!response.ok) {\n                        const error = (data && data.message) || response.status;\n                        return Promise.reject(error);\n                    }\n                    setItems(data);\n                    setIsLoaded(true);\n                })\n        }\n\n        fetchData();\n    }, [url]);\n\n    return (\n        <Container fluid>\n            <Row className=\"justify-content-md-center mt-5\">\n                <Col xs lg=\"6\" md=\"6\">\n                    <h1>{process.env.REACT_APP_WEBSITE_NAME}</h1>\n                </Col>\n            </Row>\n\n            <Row className=\"justify-content-md-center mt-5\">\n                <Col xs lg=\"6\" md=\"6\">\n                    <FormComponent postData={postData} status={status}/>\n                </Col>\n            </Row>\n\n            <Row className=\"justify-content-md-center mt-5\">\n                <Col xs lg=\"6\" md=\"6\">\n                    {!isLoaded &&\n                    <div>Loading messages...</div>}\n                    <ListComponent items={items}/>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}